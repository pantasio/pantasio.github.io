<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on</title><link>/tags/security/</link><description>Recent content in security on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 25 Apr 2023 09:19:42 +0100</lastBuildDate><atom:link href="/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Create blog is easy. So if tittle is too long, what happen. maybe it's okay, for long long long just do it now</title><link>/blog/create-blog-is-easy.-so-if-tittle-is-too-long-what-happen.-maybe-its-okay-for-long-long-long-just-do-it-now/</link><pubDate>Tue, 25 Apr 2023 09:19:42 +0100</pubDate><guid>/blog/create-blog-is-easy.-so-if-tittle-is-too-long-what-happen.-maybe-its-okay-for-long-long-long-just-do-it-now/</guid><description>Create english Blog is easy.
TODO: - excerpt: s·∫Ω hi·ªán ·ªü ph·∫ßn blog homepage.
- description: Ch∆∞a bi·∫øt s·∫Ω hi·ªán ·ªü ƒë√¢u.
- l√†m sao link 2 b√†i vi·∫øt gi·ªØa ti·∫øng vi·ªát v√† ti·∫øng anh.
+ quan tr·ªçng l√† copy folder th√™m v√†o ph·∫ßn ti·∫øng Anh, r·ªìi ch·ªânh s·ªØa n·ªôi d·ª•ng l√† Okay.
How you control blog struct post, read nettify.
Sample syntax highlight.js Rust Code # #[derive(Debug)] pub enum State { Start, Transient, Closed, } impl From&amp;lt;&amp;amp;'a str&amp;gt; for State { fn from(s: &amp;amp;'a str) -&amp;gt; Self { match s { &amp;quot;start&amp;quot; =&amp;gt; State::Start, &amp;quot;closed&amp;quot; =&amp;gt; State::Closed, _ =&amp;gt; unreachable!</description></item><item><title>Say hello to Doks üëã</title><link>/blog/say-hello-to-doks/</link><pubDate>Tue, 25 Apr 2023 09:19:42 +0100</pubDate><guid>/blog/say-hello-to-doks/</guid><description>Introducing Doks, a Hugo theme helping sample link you build modern documentation websites that are secure, fast, and SEO-ready ‚Äî by default.
#[derive(Debug)] pub enum State { Start, Transient, Closed, } impl From&amp;lt;&amp;amp;'a str&amp;gt; for State { fn from(s: &amp;amp;'a str) -&amp;gt; Self { match s { &amp;quot;start&amp;quot; =&amp;gt; State::Start, &amp;quot;closed&amp;quot; =&amp;gt; State::Closed, _ =&amp;gt; unreachable!(), } } } Ardruino or Rasberry Pi # /* Blink Turns on an LED on for one second, then off for one second, repeatedly.</description></item></channel></rss>